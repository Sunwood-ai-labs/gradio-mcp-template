name: Debug Information

on:
  workflow_dispatch:  # 手動実行
    inputs:
      issue_number:
        description: 'Issue番号'
        required: true
        type: string
  issues:  # issueが開いたときに自動実行
    types: [opened]
  workflow_call:  # 他のワークフローから呼び出し可能
    inputs:
      issue_number:
        required: true
        type: string

permissions:
  issues: write
  contents: read

jobs:
  debug-info:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set Issue Number
        id: issue
        run: |
          # issue_numberを設定：手動実行、issue開封、または他のワークフローからの呼び出し
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "issue_number=${{ github.event.inputs.issue_number }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" = "issues" ]; then
            echo "issue_number=${{ github.event.issue.number }}" >> $GITHUB_OUTPUT
          else
            echo "issue_number=${{ inputs.issue_number }}" >> $GITHUB_OUTPUT
          fi
      
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Install OpenAI Codex
        run: npm install -g @openai/codex@0.1.2504251709
        
      - name: GitHub CLIをインストール
        run: |
          type -p curl >/dev/null || apt install curl -y
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg \
          && sudo chmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg \
          && echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
          && sudo apt update \
          && sudo apt install gh -y

      - name: Debug Information
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ISSUE_NUMBER: ${{ steps.issue.outputs.issue_number }}
        run: |
          # コマンドを実行して結果を取得
          echo "Codexの詳細情報を取得中..."
          
          # 情報収集
          SYSTEM_INFO=$(uname -a)
          OS_INFO=$(cat /etc/os-release 2>/dev/null || lsb_release -a 2>/dev/null)
          NODE_VERSION=$(node -v)
          NPM_VERSION=$(npm -v)
          CODEX_VERSION=$(codex --version 2>/dev/null || echo 'バージョン取得失敗')
          CODEX_PATH=$(which codex 2>/dev/null || echo '場所不明')
          CODEX_PACKAGE_INFO=$(npm list -g @openai/codex 2>/dev/null || echo '情報取得失敗')
          NPM_VERSIONS=$(npm view @openai/codex versions --json 2>/dev/null || echo '[]')
          
          # cgroup確認
          if [ -f /proc/1/cgroup ]; then
            CGROUP_EXISTS="✅ 存在します"
            CGROUP_CONTENT=$(head -n 5 /proc/1/cgroup)
          else
            CGROUP_EXISTS="❌ 存在しません"
            CGROUP_CONTENT=""
          fi
          
          # codexコマンドのヘルプ情報
          CODEX_HELP=$(codex --help 2>&1 | head -n 20)
          
          # 結果をファイルに保存
          echo "環境情報をissueにコメントします"
          {
            echo "## 🔍 デバッグ情報"
            echo "<details>"
            echo "<summary>詳細情報（クリックして展開）</summary>"
            echo ""
            echo "サンドボックスエラー「Sandbox was mandated, but no sandbox is available!」のデバッグ情報："
            echo ""
            echo "### システム環境"
            echo "\`\`\`"
            echo "$SYSTEM_INFO"
            echo "$OS_INFO"
            echo "\`\`\`"
            echo ""
            echo "### Node.js & npm 情報"
            echo "\`\`\`"
            echo "Node.js: $NODE_VERSION"
            echo "npm: $NPM_VERSION"
            echo "\`\`\`"
            echo ""
            echo "### Codex情報"
            echo "\`\`\`"
            echo "Version: $CODEX_VERSION"
            echo "Path: $CODEX_PATH"
            echo "Package info: "
            echo "$CODEX_PACKAGE_INFO"
            echo "\`\`\`"
            echo ""
            echo "### 利用可能なCodexバージョン"
            echo "\`\`\`"
            echo "$NPM_VERSIONS" | jq -r 'if type=="array" then .[-5:] else . end' 2>/dev/null || echo "$NPM_VERSIONS"
            echo "\`\`\`"
            echo ""
            echo "### サンドボックス関連"
            echo "/proc/1/cgroup ファイル: $CGROUP_EXISTS"
            if [ -n "$CGROUP_CONTENT" ]; then
              echo "\`\`\`"
              echo "$CGROUP_CONTENT"
              echo "\`\`\`"
            fi
            echo ""
            echo "### Codexヘルプ情報"
            echo "\`\`\`"
            echo "$CODEX_HELP"
            echo "\`\`\`"
            echo ""
            echo "### 対応策"
            echo "1. \`--approval=auto\` または \`--approval=manual\` オプションを試す"
            echo "2. 最新バージョンに更新: \`npm install -g @openai/codex@latest\`"
            echo "3. 環境変数の設定: \`FORCE_DISABLE_SANDBOX=true codex ...\`"
            echo "</details>"
          } > debug_info.txt
          
          # ファイル内容を表示（ログ用）
          cat debug_info.txt
          
          # Issueにコメント
          gh issue comment $ISSUE_NUMBER --body-file debug_info.txt
